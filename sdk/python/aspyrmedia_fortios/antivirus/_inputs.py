# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AntivirusProfileCifsArgs',
    'AntivirusProfileContentDisarmArgs',
    'AntivirusProfileExternalBlocklistArgs',
    'AntivirusProfileFtpArgs',
    'AntivirusProfileHttpArgs',
    'AntivirusProfileImapArgs',
    'AntivirusProfileMapiArgs',
    'AntivirusProfileNacQuarArgs',
    'AntivirusProfileNntpArgs',
    'AntivirusProfileOutbreakPreventionArgs',
    'AntivirusProfilePop3Args',
    'AntivirusProfileSmbArgs',
    'AntivirusProfileSmtpArgs',
    'AntivirusProfileSshArgs',
]

@pulumi.input_type
class AntivirusProfileCifsArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileContentDisarmArgs:
    def __init__(__self__, *,
                 cover_page: Optional[pulumi.Input[str]] = None,
                 detect_only: Optional[pulumi.Input[str]] = None,
                 error_action: Optional[pulumi.Input[str]] = None,
                 office_action: Optional[pulumi.Input[str]] = None,
                 office_dde: Optional[pulumi.Input[str]] = None,
                 office_embed: Optional[pulumi.Input[str]] = None,
                 office_hylink: Optional[pulumi.Input[str]] = None,
                 office_linked: Optional[pulumi.Input[str]] = None,
                 office_macro: Optional[pulumi.Input[str]] = None,
                 original_file_destination: Optional[pulumi.Input[str]] = None,
                 pdf_act_form: Optional[pulumi.Input[str]] = None,
                 pdf_act_gotor: Optional[pulumi.Input[str]] = None,
                 pdf_act_java: Optional[pulumi.Input[str]] = None,
                 pdf_act_launch: Optional[pulumi.Input[str]] = None,
                 pdf_act_movie: Optional[pulumi.Input[str]] = None,
                 pdf_act_sound: Optional[pulumi.Input[str]] = None,
                 pdf_embedfile: Optional[pulumi.Input[str]] = None,
                 pdf_hyperlink: Optional[pulumi.Input[str]] = None,
                 pdf_javacode: Optional[pulumi.Input[str]] = None):
        if cover_page is not None:
            pulumi.set(__self__, "cover_page", cover_page)
        if detect_only is not None:
            pulumi.set(__self__, "detect_only", detect_only)
        if error_action is not None:
            pulumi.set(__self__, "error_action", error_action)
        if office_action is not None:
            pulumi.set(__self__, "office_action", office_action)
        if office_dde is not None:
            pulumi.set(__self__, "office_dde", office_dde)
        if office_embed is not None:
            pulumi.set(__self__, "office_embed", office_embed)
        if office_hylink is not None:
            pulumi.set(__self__, "office_hylink", office_hylink)
        if office_linked is not None:
            pulumi.set(__self__, "office_linked", office_linked)
        if office_macro is not None:
            pulumi.set(__self__, "office_macro", office_macro)
        if original_file_destination is not None:
            pulumi.set(__self__, "original_file_destination", original_file_destination)
        if pdf_act_form is not None:
            pulumi.set(__self__, "pdf_act_form", pdf_act_form)
        if pdf_act_gotor is not None:
            pulumi.set(__self__, "pdf_act_gotor", pdf_act_gotor)
        if pdf_act_java is not None:
            pulumi.set(__self__, "pdf_act_java", pdf_act_java)
        if pdf_act_launch is not None:
            pulumi.set(__self__, "pdf_act_launch", pdf_act_launch)
        if pdf_act_movie is not None:
            pulumi.set(__self__, "pdf_act_movie", pdf_act_movie)
        if pdf_act_sound is not None:
            pulumi.set(__self__, "pdf_act_sound", pdf_act_sound)
        if pdf_embedfile is not None:
            pulumi.set(__self__, "pdf_embedfile", pdf_embedfile)
        if pdf_hyperlink is not None:
            pulumi.set(__self__, "pdf_hyperlink", pdf_hyperlink)
        if pdf_javacode is not None:
            pulumi.set(__self__, "pdf_javacode", pdf_javacode)

    @property
    @pulumi.getter(name="coverPage")
    def cover_page(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cover_page")

    @cover_page.setter
    def cover_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cover_page", value)

    @property
    @pulumi.getter(name="detectOnly")
    def detect_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detect_only")

    @detect_only.setter
    def detect_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detect_only", value)

    @property
    @pulumi.getter(name="errorAction")
    def error_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_action")

    @error_action.setter
    def error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_action", value)

    @property
    @pulumi.getter(name="officeAction")
    def office_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_action")

    @office_action.setter
    def office_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_action", value)

    @property
    @pulumi.getter(name="officeDde")
    def office_dde(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_dde")

    @office_dde.setter
    def office_dde(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_dde", value)

    @property
    @pulumi.getter(name="officeEmbed")
    def office_embed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_embed")

    @office_embed.setter
    def office_embed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_embed", value)

    @property
    @pulumi.getter(name="officeHylink")
    def office_hylink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_hylink")

    @office_hylink.setter
    def office_hylink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_hylink", value)

    @property
    @pulumi.getter(name="officeLinked")
    def office_linked(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_linked")

    @office_linked.setter
    def office_linked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_linked", value)

    @property
    @pulumi.getter(name="officeMacro")
    def office_macro(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "office_macro")

    @office_macro.setter
    def office_macro(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_macro", value)

    @property
    @pulumi.getter(name="originalFileDestination")
    def original_file_destination(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "original_file_destination")

    @original_file_destination.setter
    def original_file_destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_file_destination", value)

    @property
    @pulumi.getter(name="pdfActForm")
    def pdf_act_form(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_form")

    @pdf_act_form.setter
    def pdf_act_form(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_form", value)

    @property
    @pulumi.getter(name="pdfActGotor")
    def pdf_act_gotor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_gotor")

    @pdf_act_gotor.setter
    def pdf_act_gotor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_gotor", value)

    @property
    @pulumi.getter(name="pdfActJava")
    def pdf_act_java(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_java")

    @pdf_act_java.setter
    def pdf_act_java(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_java", value)

    @property
    @pulumi.getter(name="pdfActLaunch")
    def pdf_act_launch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_launch")

    @pdf_act_launch.setter
    def pdf_act_launch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_launch", value)

    @property
    @pulumi.getter(name="pdfActMovie")
    def pdf_act_movie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_movie")

    @pdf_act_movie.setter
    def pdf_act_movie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_movie", value)

    @property
    @pulumi.getter(name="pdfActSound")
    def pdf_act_sound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_act_sound")

    @pdf_act_sound.setter
    def pdf_act_sound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_sound", value)

    @property
    @pulumi.getter(name="pdfEmbedfile")
    def pdf_embedfile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_embedfile")

    @pdf_embedfile.setter
    def pdf_embedfile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_embedfile", value)

    @property
    @pulumi.getter(name="pdfHyperlink")
    def pdf_hyperlink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_hyperlink")

    @pdf_hyperlink.setter
    def pdf_hyperlink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_hyperlink", value)

    @property
    @pulumi.getter(name="pdfJavacode")
    def pdf_javacode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdf_javacode")

    @pdf_javacode.setter
    def pdf_javacode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_javacode", value)


@pulumi.input_type
class AntivirusProfileExternalBlocklistArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AntivirusProfileFtpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileHttpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 unknown_content_encoding: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if unknown_content_encoding is not None:
            pulumi.set(__self__, "unknown_content_encoding", unknown_content_encoding)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="unknownContentEncoding")
    def unknown_content_encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknown_content_encoding")

    @unknown_content_encoding.setter
    def unknown_content_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_content_encoding", value)


@pulumi.input_type
class AntivirusProfileImapArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileMapiArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileNacQuarArgs:
    def __init__(__self__, *,
                 expiry: Optional[pulumi.Input[str]] = None,
                 infected: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None):
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if infected is not None:
            pulumi.set(__self__, "infected", infected)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry", value)

    @property
    @pulumi.getter
    def infected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "infected")

    @infected.setter
    def infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "infected", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class AntivirusProfileNntpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileOutbreakPreventionArgs:
    def __init__(__self__, *,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 ftgd_service: Optional[pulumi.Input[str]] = None):
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if ftgd_service is not None:
            pulumi.set(__self__, "ftgd_service", ftgd_service)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter(name="ftgdService")
    def ftgd_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftgd_service")

    @ftgd_service.setter
    def ftgd_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftgd_service", value)


@pulumi.input_type
class AntivirusProfilePop3Args:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileSmbArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)


@pulumi.input_type
class AntivirusProfileSmtpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileSshArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fortindr: Optional[pulumi.Input[str]] = None,
                 fortisandbox: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortindr")

    @fortindr.setter
    def fortindr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr", value)

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fortisandbox")

    @fortisandbox.setter
    def fortisandbox(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


